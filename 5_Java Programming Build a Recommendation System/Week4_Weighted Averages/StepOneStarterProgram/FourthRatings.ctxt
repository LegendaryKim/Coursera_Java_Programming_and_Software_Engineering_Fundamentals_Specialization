#BlueJ class context
comment0.target=FourthRatings
comment1.params=
comment1.target=FourthRatings()
comment10.params=id\ numSimilarRaters\ minimalRaters\ filterCriteria
comment10.target=java.util.ArrayList\ getSimilarRatingsByFilters(java.lang.String,\ int,\ int,\ Filter)
comment2.params=id\ minimalRaters
comment2.target=double\ getAverageByID(java.lang.String,\ int)
comment3.params=id
comment3.target=int\ countRatings(java.lang.String)
comment4.params=minimalRaters
comment4.target=java.util.ArrayList\ getAverageRatings(int)
comment5.params=minimalRaters\ filterCriteria
comment5.target=java.util.ArrayList\ getAverageRatingsByFilter(int,\ Filter)
comment6.params=rate
comment6.target=double\ rateScaling(double)
comment7.params=me\ r
comment7.target=double\ dotProduct(Rater,\ Rater)
comment8.params=id
comment8.target=java.util.ArrayList\ getSimilarities(java.lang.String)
comment9.params=id\ numSimilarRaters\ minimalRaters
comment9.target=java.util.ArrayList\ getSimilarRatings(java.lang.String,\ int,\ int)
comment9.text=\n\ \ \ \ public\ ArrayList<Rating>\ getSimilarRatings(String\ id,\ int\ numSimilarRaters,\ int\ minimalRaters)\ {\n\ \ \ \ \ \ \ \ ArrayList<Rating>\ result\ \=\ new\ ArrayList<Rating>();\n\ \ \ \ \ \ \ \ ArrayList<String>\ moviesID\ \=\ MovieDatabase.filterBy(new\ TrueFilter());\n\ \ \ \ \ \ \ \ ArrayList<Rating>\ similarList\ \=\ getSimilarities(id);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ Rater\ myRater\ \=\ RaterDatabase.getRater(id);\n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ for\ (String\ movieID\:\ moviesID)\ {\n\ \ \ \ \ \ \ \ \ \ \ \ if\ (myRater.hasRating(movieID))\ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ continue;\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ int\ nRatings\ \=\ 0;\n\ \ \ \ \ \ \ \ \ \ \ \ double\ weightedSum\ \=\ 0.;\n\ \ \ \ \ \ \ \ \ \ \ \ for\ (int\ k\=0;\ k\ <\ numSimilarRaters;\ k++)\ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Rating\ r\ \=\ similarList.get(k);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ String\ similarRaterID\ \=\ r.getItem();\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Rater\ similarRater\ \=\ RaterDatabase.getRater(similarRaterID);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ (similarRater.hasRating(movieID))\ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ nRatings\ ++;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ double\ rating\ \=\ similarRater.getRating(movieID);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ double\ similarityRating\ \=\ r.getValue();\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ weightedSum\ +\=\ similarityRating\ *\ rating;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ \ \ \ \ if\ (nRatings\ >\=\ minimalRaters)\ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ double\ weightedAveRating\ \=\ weightedSum\ /\ nRatings;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ result.add(new\ Rating(movieID,\ weightedAveRating));\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ Collections.sort(result,\ Collections.reverseOrder());\n\ \ \ \ \ \ \ \ return\ result;\n\ \ \ \ }\n
numComments=11
